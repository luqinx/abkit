<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE module PUBLIC
    "-//Checkstyle//DTD Checkstyle Configuration 1.3//EN"
    "https://checkstyle.org/dtds/configuration_1_3.dtd">

<!--
 Checkstyle configuration that checks the Google coding conventions from Google Java Style
 that can be found at https://google.github.io/styleguide/javaguide.html.

 Checkstyle is very configurable. Be sure to read the documentation at
 http://checkstyle.sf.net (or in your downloaded distribution).

 To completely disable a check, just comment it out or delete it from the file.

 Authors: Max Vetrenko, Ruslan Diachenko, Roman Ivanov.
 -->

<module name="Checker">

    <!--使用UTF-8字符集处理文件-->
    <property name="charset" value="UTF-8"/>

    <!--违规 以warning输出 默认error-->
    <!--<property name="severity" value="warning"/>-->


    <!-- 检查文件中是否含有tab键-->
    <module name="FileTabCharacter">
        <property name="eachLine" value="true"/>
    </module>

    <module name="TreeWalker">

        <!-- 避免.*,重复多余的和不使用的import-->
        <module name="AvoidStarImport"/>
        <module name="RedundantImport"/>
        <module name="UnusedImports"/>

        <!--检查目录和包名称是否匹配。-->
        <module name ="PackageDeclaration"/>

        <!--检查空白块 option 选项 text，stmt default stmt-->
        <module name="EmptyBlock"/>

        <!--检查空的 catch块-->
        <module name="EmptyCatchBlock" />
        <!--空行检查-->
        <module name ="EmptyLineSeparator">
            <property name ="allowNoEmptyLineBetweenFields" value ="true"/>
            <property name ="allowMultipleEmptyLinesInsideClassMembers" value ="false"/>
        </module>
        <!--避免嵌套的代码块-->
        <module name="AvoidNestedBlocks">
            <property name="allowInSwitchCase" value="false"/>
        </module>


        <!-- 检查代码块:起始大括号和if等同行，不能有空的代码块，结束大括号另起一行-->
        <module name="LeftCurly"/>
        <module name="NeedBraces"/>
        <module name="RightCurly"/>
        <!-- 当有多重修饰符时,修饰符采用以下顺序:
        (public,protected,private,abstract,static,final,
        transient,volatile,synchronized,native,strictfp) -->
        <module name="ModifierOrder"/>

        <!--禁止内联条件(避免三元表达式)-->
        <!--<module name="AvoidInlineConditionals"/>-->

        <!--检查字符串常量是否在equals（）比较的左侧-->
        <module name="EqualsAvoidNull"/>

        <module name="MagicNumber"/>

        <!--对象默认初始化-->
        <module name="ExplicitInitialization">
            <property name="onlyObjectReferences" value="true"/>
        </module>

        <!--Switch 定义 default -->
        <module name="MissingSwitchDefault"/>
        <!--switch 中default的位置检查，在所有case下面-->
        <module name="DefaultComesLast"/>

        <!--循环控制变量 防止循环内修改-->
        <module name ="ModifiedControlVariable">
            <property name ="skipEnhancedForLoopVariable" value ="true"/>
        </module>


        <!--if嵌套深度-->
        <module name ="NestedIfDepth">
            <property name ="max" value ="6"/>
        </module>

        <module name ="NestedForDepth">
            <property name ="max" value ="3"/>
        </module>

        <module name ="NestedTryDepth">
            <property name ="max" value ="3"/>
        </module>

        <!--禁止一行有多句代码-->
        <module name ="OneStatementPerLine"/>

        <!--实例变量的引用，实用this,待todo-->
        <module name ="RequireThis">
            <property name ="checkMethods" value ="false"/>
        </module>

        <!--检查过于复杂的布尔返回语句-->
        <module name ="SimplifyBooleanReturn"/>

        <!--使用equals()比较字符串-->
        <module name ="StringLiteralEquality"/>


        <!-- 每行字符数 -->
        <module name="LineLength">
            <property name="max" value="150"/>
        </module>

        <!-- 方法长度 max default 150行 -->
        <module name="MethodLength">
            <property name="tokens" value="METHOD_DEF"/>
        </module>
        <!-- 构造方法长度 max default 150行 -->
        <module name="MethodLength">
            <property name="tokens" value="CTOR_DEF"/>
            <property name="max" value="60" />
        </module>

        <!-- 类，接口命名 大写字母开头，长度(0,29) -->
        <module name="TypeName">
            <property name="format" value="(^[A-Z][a-zA-Z0-9]{0,29}$)"/>
        </module>

        <!-- 方法命名 小写字母开头，长度(0,29) -->
        <module name="MethodName">
            <property name="format" value="(^[a-z][a-zA-Z0-9]{0,29}$)"/>
        </module>

        <!-- 成员变量命名 小写字母开头，长度(0,29) -->
        <module name="MemberName">
            <property name="format" value="(^[a-z][a-zA-Z0-9]{0,29}$)"/>
        </module>

        <!-- 参数命名 小写字母开头，长度(0,29) -->
        <module name="ParameterName">
            <property name="format" value="(^[a-z][a-zA-Z0-9_]{0,29}$)"/>
        </module>

        <!-- 常量命名 不能有小写字母，长度(0,29) -->
        <module name="ConstantName">
            <property name="format" value="(^[A-Z0-9_]{0,29}$)"/>
        </module>


        <!--@语句的顺序-->
        <module name="AtclauseOrder">
            <property name="tagOrder" value="@author, @version, @param,
 @return, @throws, @exception, @see, @since, @serial,
 @serialField, @serialData, @deprecated" />
            <property name="target" value="CLASS_DEF, INTERFACE_DEF, ENUM_DEF,
 METHOD_DEF, CTOR_DEF, VARIABLE_DEF" />
        </module>

        <!-- 检查类和接口的javadoc 默认不检查author 和version tags
        authorFormat: 检查author标签的格式
        versionFormat: 检查version标签的格式
        scope: 可以检查的类的范围，例如：public只能检查public修饰的类，private可以检查所有的类
        excludeScope: 不能检查的类的范围，例如：public，public的类将不被检查，但访问权限小于public的类仍然会检查，其他的权限以此类推
        tokens: 该属性适用的类型，例如：CLASS_DEF,INTERFACE_DEF -->
        <module name="JavadocType">
            <property name="authorFormat" value="\S" />
            <property name="scope" value="protected" />
            <property name="tokens" value="CLASS_DEF,INTERFACE_DEF" />
        </module>

        <!-- 检查方法的javadoc的注释
        scope: 可以检查的方法的范围，例如：public只能检查public修饰的方法，private可以检查所有的方法
        allowMissingParamTags: 是否忽略对参数注释的检查
        allowMissingThrowsTags: 是否忽略对throws注释的检查
        allowMissingReturnTag: 是否忽略对return注释的检查 -->
        <module name="JavadocMethod">
            <property name="scope" value="private"/>
            <property name="allowMissingParamTags" value="false"/>
            <property name="allowMissingThrowsTags" value="false"/>
            <property name="allowMissingReturnTag" value="false"/>
            <property name="tokens" value="METHOD_DEF" />
            <property name="allowUndeclaredRTE" value="true"/>
            <property name="allowThrowsTagsForSubclasses" value="true"/>
            <!--允许get set 方法没有注释-->
            <property name="allowMissingPropertyJavadoc" value="true"/>
        </module>

        <!--@ 后面有对 @ 的描述-->
        <module name="NonEmptyAtclauseDescription"/>

    </module>

</module>